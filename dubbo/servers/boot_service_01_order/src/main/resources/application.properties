server.port=10085
spring.application.name=boot-order
dubbo.application.name=boot-order
# register=false 配置为不向注册中心注册 适用于开发测试时，大家共用一个注册中心时，服务提供者不向该注册中心注册
dubbo.registry.address=zookeeper://127.0.0.1:2181
# 服务之间通信协议 端口
dubbo.protocol.name=dubbo
dubbo.protocol.port=20891
# 高效的Java序列化
#dubbo.protocol.serialization=kryo
# 将需要被序列化的对象注册到dubbo系统中，实现回调接口 SerializationOptimizer
#dubbo.protocol.optimizer=XXXX

# 超时  dubbo的超时配置是针对客户端（客户端超时配置配置）；可以针对consumer provider 进行全局，  接口 ， 方法 配置
# 1、消费端超时：consumer发起请求，等待，如果在规定时间内consumer没得到provider的响应，直接返回超时异常（但服务端的代码依然在执行）
# 2、服务端超时：consumer发起请求，等待，服务端方处理在规定时间内没执行完，此时返回超时异常（服务器代码不会终止）（服务端超时配置是消费端的缺少配置，用来简化配置，服务端配置了超时，消费端可以不用再配置）
#dubbo.provider.timeout=100
# 配置指定接口超时时间 以下配置未起作用
#dubbo.service.com.vostroi.order.service.OrderService.getByCustomerId.timeout=100
dubbo.provider.retries=1
# 官方推荐用法： 在Provider端尽量多配置Consumer属性，
#   1. 作为Provider，比Consumer更清楚服务性能，如：调用的超时时间，合理的重试次数
#   2. 在Provider配置后，Consumer不配置则会使用Provider端配置，否则Consumer会使用Consumer端的全局配置，这对于Provider是不可控，往往也不合理
# 负载均衡算法 缺省是 random （roundrobin 轮询； leastactive 最不活跃优先-每个机器维护着一个活跃数，有请求来，活跃数+1，请求完成 活跃数减1，活跃数少，说明机器处理请求快）
dubbo.provider.loadbalance=leastactive
# 消费者端最大的并发调用限制
dubbo.provider.actives=10
# 服务提供者并行执行请求上限
dubbo.provider.executes=10
# 服务线程池大小
dubbo.provider.threads=200

# 导出线程堆栈 查找系统性能瓶颈
dubbo.application.dump-directory=/ttmmpp
# 提供者列表缓存文件-会缓存注册中心列表（注册中心挂了，从该文件读取服务提供者列表，保证高可用）
dubbo.registry.file=/cache/dubbo.cache