server.port=10086
spring.application.name=boot-customer
dubbo.application.name=boot-customer
dubbo.registry.address=zookeeper://127.0.0.1:2181
# 服务之间通信协议 端口
dubbo.protocol.name=dubbo
dubbo.protocol.port=20890

# 关闭 注册 订阅时对注册中心检查
dubbo.registry.check=false
# 关闭检查服务（所有）提供者
dubbo.consumer.check=false


# 默认超时时间为3秒
# dubbo采用netty作为网络组件，是一种NIO模式，消费端发起请求后，线程不会阻塞等待服务端的返回，而是马上得到一个ResponseFuture，消费端通过不断的轮询（就在避免死循环，所以引入超时机制）判断结果是否有返回，
# 为什么要有超时机制 避免业务线程被长时间占用，业务线程池用完拒绝服务的异常
#dubbo.consumer.timeout=5000
# 重试 默认是2次， 一共尝试调3次
# 重试 保障业务容错，对于“读”业务，没太大影响；但对于“写”业务，可能会导致问题（重复订单，重复扣费等）
# 幂等 解决重试问题的重要手段
#dubbo.consumer.retries=0
# 超时与服务降级 服务之间的调用链接 在其中某一个服务调用超时，会导致整个业务失败，这是强依赖
# 1、采用异常捕获
# 2、服务降级（本地伪装Mock）

# 优雅停机 等待时间
# Dubbo 是通过 JDK 的 ShutdownHook 来完成优雅停机的，所以如果用户使用 kill -9 PID 等强制关闭指令，是不会执行优雅停机的，只有通过 kill PID 时，才会执行
dubbo.application.shutwait=10000